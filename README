This README documents my work to reverse engineer the Alps touchpad on a
Dell N5110 for Linux.  When I first purchased the laptop and installed
Ubuntu 12.04, I noticed that the touchpad behaved erratically.  It would
randomly skip and home-to-cursor. A brief search showed that this
behavior has been a long-standing and well publicized issued.  To date
several other Alps touchpads have been reverse engineered but no one had
addressed this particular model.  

Dell has a driver for the touchpad for Vista and Win7.  I repeatedly
contacted Dell support and Alps; the only response I received was "We
don't support Linux"; odd considering Dell ships Ubuntu.

I developed a simple serio_raw program to peek/poke at the touchpad and
found it had characteristics inconsistent with other Alps touchpads.  I
used Seth Forshee's procedure to dump the driver interface using qemu and
vista as the guest OS [1].  This require me to patch the qemu
acpi-dsdt.dsl file to recognize the Alps hardware in order to install
the Dell/Alps Vista driver [2]

Based on the qemu log, I started hacking up a psmouse DLKM from the
linux-3.2.0 source tree.  First I added in Ben Gamari's ALPS_PROTO_V5
fix for the Alps Touchpad on his Dell E6230 [3] and tried it but the
characteristics were too different.  In fact even the enter-command-mode
generic response is different.  I then took the vista log and
created an ALPS_PROTO_V6 hw init by pasting the init sequence from the
qemu log into alps_hw_init_v6.  That got me part of the way, the device
was no longer being handled as a stock ps/2 mouse but now as an ALPS
DualPoint Touchpad.  However, the 6-byte message format was undocumented
[4]. As far as I can tell, it is:

 byte 0:    1    1    0    0    1    0    0    0
 byte 1:    0   x6   x5   x4   x3   x2   x1   x0
 byte 2:    0   y6   y5   y4   y3   y2   y1   y0
 byte 3:    0    ?    ?    ?    1    m    r    l
 byte 4:   y10  y9   y8   y7  x10   x9   x8   x7
 byte 5:    0   z6   z5   z4   z3   z2   z1   z0

So I created alps_process_touchpad_packet_v6 to parse the touchpad
packets.

The ALPS touchpad is working on my N5110.  I can control the touchpad
somewhat via xinput and the System Settings->Touchpad widget.  I think
it can still be tightened up but, at least, it's usable now.

One word about the source.  I have added a MOD_DST define in alps.h for
special handling.  This must be set for the N5110 touchpad.  If it is
set, probably all other Alps touchpads will not work.

Dave Turvene

[1] http://swapspace.forshee.me/2011/11/touchpad-protocol-reverse-engineering.html
[2] http://www.spinics.net/lists/linux-input/msg21948.html
[3] http://www.spinics.net/lists/linux-input/msg21993.html
[4] file:///usr/src/linux-source-3.2.0/linux-3.2.0/Documentation/input/alps.txt

function build_alps() {

    echo "Build the psmouse DLKM"

    echo "clean the current dlkm if it exists"
    sudo dkms remove psmouse/alps-dst-0.1 --all
    sudo dkms build psmouse/alps-dst-0.1

    if [[ $? == 0 ]]; then
        sudo dkms install psmouse/alps-dst-0.1
        sudo rmmod psmouse && sudo modprobe -v psmouse
    else
        printf "Build failed\n"
        cat /var/lib/dkms/psmouse/alps-dst-0.1/build/make.log
    fi
}

function set_system() {

   echo "Support functions tuning the Alps touchpad"

   echo "Get the Alps touchpad input ID"
   ID=$(xinput --list | grep "AlpsPS/2" | sed -e 's/.*id=\([1-9]\+\).*/\1/')

   echo "Get the Velocity Scaling property and set it to a faster value"
   CSPD=$(xinput list-props 14 | grep "Velocity Scaling" | sed -e 's/.*(\([0-9]\+\)).*/\1/')
   xinput set-prop $ID $CSPD 40

}
