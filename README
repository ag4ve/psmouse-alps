$Id: README 710 2012-09-18 18:10:52Z dturvene $

History
-------
0.1: hacked in rudimentary support for the Dell IR15 N5110.  Nothing else 
     should work - probably causing a kernel panic.
0.2: add logic to isolate N5110 changes from previously supported devices
     expand diagnostics to capture touchpad protocol
     add kernel parameter to enable/disable runtime packet debug
     enabled edge scrolling for N5110
     add more shell scripts to control/debug device

Todo
----
* multi-touch support
     
Background
----------
This README documents my work to reverse engineer the Alps touchpad on a
Dell N5110 for Linux.  When I first purchased the laptop and installed
Ubuntu 12.04, I noticed that the touchpad behaved erratically.  It would
randomly skip and home-to-cursor. A brief search showed that this
behavior has been a long-standing and well publicized issued.  To date
several other Alps touchpads have been reverse engineered but no one had
addressed this particular model.  

Dell has a driver for the touchpad for Vista and Win7.  I repeatedly
contacted Dell support and Alps; the only response I received was "We
don't support Linux"; odd considering Dell ships Ubuntu.

I developed a simple serio_raw program to peek/poke at the touchpad and
found it had characteristics inconsistent with other Alps touchpads.  I
used Seth Forshee's procedure to dump the driver interface using qemu and
vista as the guest OS [1].  This require me to patch the qemu
acpi-dsdt.dsl file to recognize the Alps hardware in order to install
the Dell/Alps Vista driver [2]

Based on the qemu log, I started hacking up a psmouse DLKM from the
linux-3.2.0 source tree.  First I added in Ben Gamari's ALPS_PROTO_V5
fix for the Alps Touchpad on his Dell E6230 [3] and tried it but the
characteristics were too different.  In fact even the enter-command-mode
generic response is different.  I then took the vista log and
created an ALPS_PROTO_V6 hw init by pasting the init sequence from the
qemu log into alps_hw_init_v6.  That got me part of the way, the device
was no longer being handled as a stock ps/2 mouse but now as an ALPS
DualPoint Touchpad.  However, the 6-byte message format was undocumented
[4]. As far as I can tell, it is:

 byte 0:    1    1    0    0    1    0    0    0
 byte 1:    0   x6   x5   x4   x3   x2   x1   x0
 byte 2:    0   y6   y5   y4   y3   y2   y1   y0
 byte 3:    0    ?    ?    ?    1    m    r    l
 byte 4:   y10  y9   y8   y7  x10   x9   x8   x7
 byte 5:    0   z6   z5   z4   z3   z2   z1   z0

So I created alps_process_touchpad_packet_v6 to parse the touchpad
packets.

The ALPS touchpad is working on my N5110.  I can control the touchpad
somewhat via xinput and the System Settings->Touchpad widget.  I think
it can still be tightened up but, at least, it's usable now.

Dave Turvene

[1] http://swapspace.forshee.me/2011/11/touchpad-protocol-reverse-engineering.html
[2] http://www.spinics.net/lists/linux-input/msg21948.html
[3] http://www.spinics.net/lists/linux-input/msg21993.html
[4] file:///usr/src/linux-source-3.2.0/linux-3.2.0/Documentation/input/alps.txt

bash shell scripts
------------------
# I used these scripts to automate some testing.  Note that these may not work
# on another configuration.  To debug, step through each command in a script to
# see where it failed.

function install_dkms() {

    DLKM=alps-dst-0.2
    KERN=$(uname -r)

    echo "Test for existance, if none copy to /usr/src"
    if ! [ -f /usr/src/psmouse-$DLKM ]; theno
        echo "copy $HOME/svn_psmouse to /usr/src/psmouse-$DLKM"
        sudo cp -vupr $HOME/svn_psmouse /usr/src/psmouse-$DLKM
    fi
}

function build_alps() {
    DLKM=alps-dst-0.2
    KERN=$(uname -r)

    echo "/usr/src/psmouse-$DLKM/dkms.conf must have PACKAGE_VERSION set to $DLKM"
    sudo dkms remove psmouse/$DLKM --all

    echo "/usr/src/psmouse-$DLKM/dkms.conf must have PACKAGE_VERSION set to $DLKM"
    echo "This places the psmouse.ko dlkm in /lib/modules/$KERN/updates/dkms"
    sudo dkms build psmouse/$DLKM

    if [[ $? == 0 ]]; then
        sudo dkms install psmouse/$DLKM
        sudo rmmod psmouse && sudo modprobe -v psmouse
    else
        printf "Build failed\n"
        cat /var/lib/dkms/psmouse/$DLKM/build/make.log
    fi
}

# Function to set up X parameters for cursor and scrolling
function set_alps() {

   echo "Support functions tuning the Alps touchpad"

   echo "Get the Alps touchpad input ID"
   ID=$(xinput --list | grep "AlpsPS/2" | sed -e 's/.*id=\([1-9]\+\).*/\1/')

   echo "Get the Velocity Scaling property and set it to a faster value"
   CSPD=$(xinput list-props $ID | grep "Velocity Scaling" | sed -e 's/.*(\([0-9]\+\)).*/\1/')
   xinput set-prop $ID $CSPD 32

   ES=$(xinput list-props $ID | grep "Edge Scrolling" | sed -e 's/.*(\([0-9]\+\)).*/\1/')
   echo "enable edge scrolling for virtical only"
   xinput set-prop $ID --type=int $ES 1 0 0
   echo "disable edge scrolling"
   xinput set-prop $ID --type=int $ES 0 0 0
   xinput list-props $ID | grep $ES
}

# Enable/Disable runtime packet dump
# depending on your syslog config, packet dump will appear in dmesg and/or
# /var/log/syslog.  See man:syslogd for configuring
function alps_debug() {

    prm_file=/sys/module/psmouse/parameters/alps_debug

    echo "packet debug status"
    cat $prm_file

    echo "enable alps_debug to dump packets - default"
    sudo sh -c "echo 1 > $prm_file"

    echo "disable alps_debug to dump packets"
    sudo sh -c "echo 0 > $prm_file"
}

# Function to retrieve the touchpad hardware model from BIOS
# Dell N5110: DLL04B0
# James says Dell E6230: DLL0532
function get_dsdt() {

    echo "Suck out the ACPI DSDT"
    if [ 1 ]; then
        sudo cat /sys/firmware/acpi/tables/DSDT > DSDT.aml
    else 
        sudo acpidump -b -t DSDT -o DSDT.aml
    fi

    echo "Create DSDT.dsl"
    iasl -d DSDT.aml

    echo "Search DSDT.aml and post the section inside \"Device (PS2)\""
}
